# Задание. 
1. Проанализируйте систему компании и C4-диаграмму в контексте планирования мониторинга.
2. Добавьте в файл раздел «Мотивация». 
   Напишите здесь, почему в систему нужно добавить мониторинг и что это даст компании.
3. Добавьте раздел «Выбор подхода к мониторингу». 
   Выберите, какой подход к мониторингу вы будете использовать: RED, USE или «Четыре золотых сигнала». 
   Для разных частей системы можно использовать разные подходы.
4. Опишите, какие метрики и в каких частях системы вы будете отслеживать. 
   Перед вами список метрик. Выберите метрики, которые вы считаете нужным отслеживать. 
   Для выбранных метрик напишите:
   - Зачем нужна эта метрика.
   - Нужны ли ярлыки для этой метрики. Если ярлыки нужны, опишите, какие именно вы планируете добавить.
     Вы можете не ограничивать себя только этим списком. 
     Если вы видите, что стоит добавить какие-то ещё метрики, — добавьте и их тоже.
5. Добавьте раздел «План действий». Напишите высокоуровнево, какие задачи вы видите для реализации. 
   Это будет драфт технического задания. Например, «Создать инстанс time-series базы с 
   использованием такой-то технологии».
6. ❌ Дополнительное задание. - Не выполнялось.

## 2. Мотивация

Увеличение наблюдаемости дает:
 - Улучшение видимости и повышение безопасности системы. 
   Видимость означает, что вы можете получить полное представление о работе системы. 
   Чем выше видимость, тем проще обеспечить безопасность.
 - Более быстрое решение проблем и повышение надёжности системы. 
   С помощью инструментов наблюдения команда может быстрее определить корень проблемы. 
   Следовательно, так её проще устранить и предотвратить в будущем.
 - Повышение быстродействия системы и распределение ресурсов. 
   С помощью инструментов наблюдения можно выявлять узкие места. 
   Это помогает оптимизировать производительность — вы можете проанализировать, 
   как система работает под разными нагрузками.
 - Ускорение рабочего процесса и DevOps. 
   Наблюдаемость способствует оптимизации процессов и сокращению количества ошибок. 
   А это, в свою очередь, помогает ускорить рабочий процесс и улучшить взаимодействие между командами.
 - Ценные бизнес-инсайты. 
   Когда данные, которые вы собираете благодаря наблюдаемости системы,
    накапливаются, они могут привести вас к бизнес-инсайтам. 
    Они помогут вам принимать стратегические решения более обоснованно.
 - Повышение удовлетворённости пользователей. 
   Своевременное решение проблем, которые связаны с производительностью и функциональностью приложения, 
   улучшает пользовательский опыт.

## 3. Выбор подхода к мониторингу.
### USE - на первоначальном этапе, для выявления проблемных сервисов и разработки

Когда использовать этот метод? Метод USE лучше всего работает с ресурсами, производительность которых снижается при интенсивном использовании. 
"То,что доктор прописал".

### RED. Для дальнейшего тюнинга системы и повышения увдолетворенности внешних и внутренних пользователей. 
(Измеряются показатели, которые важны для конечных пользователей ваших сервисов. Этот подход можно использовать 
для мониторинга веб-сервисов, запросов к базам данных, очередей и других подобных систем.)

Но, возможно внедрять его сразу, в зависимости от договоренности с Заказчиком.

## 4. Описание метрик
  USE
  Utilization (утилизация) — это среднее время, которое ресурс занят работой. Измеряется в процентах.
  Saturation (насыщенность) — объём работы, которую ресурс не может выполнить и вынужден откладывать 
  (например, в очередь), чтобы сохранять работоспособность. Насыщенность можно измерить как длину очереди.
  Errors (ошибки) — количество ошибок.

  RED
  Requests Rate — частота запросов, 
    - Это количество запросов, которые обслуживает ваш сервис в секунду. 
      Частота запросов даёт представление о пропускной способности сервиса.
      Эта метрика может помочь избежать сбоев — вы будете отслеживать пиковый 
      трафик и сможете прогнозировать, сколько нужно ресурсов.
  Errors — ошибки,
    - Это количество неудачных запросов в секунду. 
      Ошибки напрямую влияют на взаимодействие с потребителями. Следовательно, 
      отслеживать частоту ошибок просто необходимо.
      Иногда система определяет как ошибки неправильные, неполные или неожиданные запросы 
      пользователей. В таких случаях определение точной причины ошибок нередко превращается 
      в сложный квест для технических команд. Приходится глубоко погружаться в код приложения 
      или изучать логи — второй источник данных в концепции наблюдаемости.
  Duration — длительность.
    - Это количество времени, которое уходит на выполнение одного запроса. 
    Чтобы измерить продолжительность в контексте сервисов, обычно используют распределённую трассировку.
     Если в двух словах, то распределённая трассировка позволяет отслеживать запрос пользователя 
     в разных сервисах и измерять время, которое заняли события в каждом сервисе. 
     
  Обязательно потребуются метрики 
   - Количество и динамика пользователей магазина
   - Количество заказов
   - Количество заказов в работе
   - Количество заказовы выпоненных/не выпоненных в срок
   - Нагруждка на промедуточные сервисы
   - Количество внешних пользователей/запросов API
   - Время исполнения заказа
   - Время ожидания заказа до взятия в работу
   - Количество заказов на оператора/продавца
   ....
   Дополнтельные метрики будут добавлены во время разработки и опытной жксплуатации системы

Список метрик для экстренного, первоначального отслеживания:

(Исключены метрийик для CRM, маагазина и RabbitMQ, как не первоочередные)

    Вжно получать объемы запросов:
      Number of requests (RPS) for MES API
      Number of requests (RPS) per user for CRM API
      Number of requests (RPS) per user for MES API
    
    Загрузка API по ресурсам (процессор, память)
     CPU % for MES API
     Memory Utilisation for MES API
      Memory Utilisation for MES db instance
    
    Посмотрим въходящий поток
      Number of connections for shop db instance
      Number of connections for MES db instance
    
    Смотрим, как ведет себя API
     Response time (latency) for MES API
    
    Оценка успешности
        Number of HTTP 200 for MES API
        Number of HTTP 500 for shop API
        Number of HTTP 500 for CRM API
        Number of HTTP 500 for MES API
        Number of HTTP 500 for shop API
        Number of simultanious sessions for MES API
    
    Смотрим и оцениваем объемы для дальнейшей оценки расширения системы
        Kb tranferred (received) for MES API
        Kb provided (sent) for MES API

### План действий

1. Создать инстанс time-series базу
2. Сформировать архитектуру СУБД и опредедить объекты мониторинга 
3. Направить в него собираемые от сервисов метрики
4. Установить и настроить систему графической фильтрации и отображения метрик.
5. Внедрить систему BI анализациза показаетлей
6. Осуществлять анализ показателей в динамике
