1. Проанализируйте диаграмму системы и её описание. 
   Решите, какую часть системы имеет смысл закешировать.
2. Добавьте в файл раздел «Мотивация». Опишите здесь, почему вы предлагаете внедрить кеширование, 
   какие проблемы оно должно решить и какие элементы системы вы планируете включить в кеширование.
3. Добавьте раздел «Предлагаемое решение». Определите, какое кеширование вы будете внедрять — 
   клиентское или серверное. Объясните, почему, на ваш взгляд, нужно использовать именно его. 
   Если вы решите куда-то внедрить серверное кеширование, то поясните, какой паттерн будете 
   применять — Cache-Aside, Write-Through или Refresh-Ahead. А также объясните, почему вы выбрали 
   этот паттерн и почему остальные паттерны не подойдут или покажут себя хуже.
4. Нарисуйте диаграмму последовательности действий (Sequence diagram). Отобразите там, как проходит 
   операция чтения списка заказов и запись об изменении статуса заказа. Там же опишите процесс 
   кеширования с указанием всех сущностей, которые участвуют в кешировании. Добавьте диаграмму 
   в раздел «Предлагаемое решение».
5. В блоке «Предлагаемое решение» опишите стратегию инвалидации кеша, которую вы планируете 
   использовать. Объясните, какую стратегию инвалидации вы предлагаете (временную, по ключу, 
   программную или другие), почему она подойдёт и почему не подойдут другие стратегии.
   Не всегда очевидно, какое решение лучше. Чтобы выбрать оптимальный вариант, можете сделать 
   сравнительный анализ в виде таблицы.


# 1. Что стоит закешировать
  - магазин
  - хранилище 3D моделей
  - элементы CRM
  - API -?

# 2. «Мотивация»
  - Кеширование уменьшает нагрузку на базу данных или удалённые сервисы, следовательно, 
    улучшает отзывчивость пользовательского интерфейса.
  - Данные должны прийти от клиента на сервер, оттуда — в СУБД, которая исполняет сложный запрос, 
    и проделать весь путь назад. В этом случае ходить в базу и каждый раз доставать из неё данные 
    слишком затратно. 
  - Что стоит закешировать
    - магазин                 - обращение заказчиков к витринам и своим моделям
    - хранидище 3D моделей    - обращение за моделями
    - элементы CRM            - данные по клиентам
    - API
    - работу с БД

# 3. Предлагаемое решение
   - Для Магазина - клиентское кеширование.
      -  Cache-Aside - будет вполне достаточно
   - Для внутрянки и API - серверное
      - Read-Through
   - Для внешних пользоателей API
      - Write-Through
   - Для БД 
      - Write-Through

# 4. Схема вложена. 
   Как проходит 
   4.1 операция чтения списка заказов 
      С заказами работает Operator
      Operator через приложение MES обращается к MES API, работа с которым кешируется методом - Read-Through
      API обращается к СУБД, работа с котрой кешируется методом - Write-Through
      API обращается к CRM API, работа с котрой кешируется методом - Read-Through
      API обращается к 3d files storage, работа с котрой кешируется методом - Read-Through

   4.2 и запись об изменении статуса заказа.
      Operator через приложение MES обращается к MES API, работа с которым кешируется методом - Read-Through
      API обращается к СУБД, работа с котрой кешируется методом - Write-Through
      API обращается к CRM API, работа с котрой кешируется методом - Read-Through

# 5. «Предлагаемое решение»

Инвалидация
   - Для магазина и CRM - на основе запросов.
   - Для API - на основе изменений или по ключу
   - Для моделей или временная или по ключу.

   Магазин и человек - это не быстрое взаимодействие, и это запросы информации
   Например - пользователь оформил и оплатил заказ. После успешной оплаты система 
   может выполнить инвалидацию кеша страницы заказа, чтобы пользователю предоставили 
   а ктуальную информацию о статусе его заказа. В противном случае заказ висел бы в 
   состоянии ожидания оплаты.

   Временная для внутрянки и API, к примеру, не подойдет.
   Для магазина не подойдет инвалидация по ключу - не будет эффективной.

   Для моделей временная точно не подойдет.